name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.54'

jobs:
  # Test job - runs on all branches
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      if: matrix.go-version == '1.21'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  # Lint job - runs on all branches
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  # Build job - runs on all branches
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build application
      run: |
        make build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sms-sync-server-${{ github.sha }}
        path: |
          build/
          sms-sync-server

  # Integration tests - runs on main and develop branches
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sms-sync-server-${{ github.sha }}

    - name: Make binary executable
      run: chmod +x sms-sync-server

    - name: Run integration tests
      run: |
        go test -v -tags=integration ./internal/handlers/

    - name: Run API tests with Postman collection
      run: |
        # Start server in background
        ./sms-sync-server &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Run basic health check
        curl -f http://localhost:8080/health || exit 1
        
        # Stop server
        kill $SERVER_PID

  # Release job - only runs on main branch
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sms-sync-server-${{ github.sha }}

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Artifacts
          - Binary: sms-sync-server
          - Coverage Report: Available in artifacts
        draft: false
        prerelease: false

  # Deploy to staging - runs on develop branch
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sms-sync-server-${{ github.sha }}

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: scp, rsync, docker deploy, etc.

  # Deploy to production - runs on main branch with manual approval
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: sms-sync-server-${{ github.sha }}

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: scp, rsync, docker deploy, etc.
